/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.opencb.biodata.models.variant.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class VariantTraitAssociation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"VariantTraitAssociation\",\"namespace\":\"org.opencb.biodata.models.variant.avro\",\"fields\":[{\"name\":\"clinvar\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ClinVar\",\"fields\":[{\"name\":\"accession\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"clinicalSignificance\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traits\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"geneNames\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"reviewStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]},{\"name\":\"gwas\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Gwas\",\"fields\":[{\"name\":\"snpIdCurrent\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"traits\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"riskAlleleFrequency\",\"type\":\"double\"},{\"name\":\"reportedGenes\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]},{\"name\":\"cosmic\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Cosmic\",\"fields\":[{\"name\":\"mutationId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"primarySite\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"siteSubtype\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"primaryHistology\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"histologySubtype\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"sampleSource\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"tumourOrigin\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"geneName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"mutationSomaticStatus\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> clinvar;
   private java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwas;
   private java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmic;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public VariantTraitAssociation() {}

  /**
   * All-args constructor.
   */
  public VariantTraitAssociation(java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> clinvar, java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwas, java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmic) {
    this.clinvar = clinvar;
    this.gwas = gwas;
    this.cosmic = cosmic;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clinvar;
    case 1: return gwas;
    case 2: return cosmic;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clinvar = (java.util.List<org.opencb.biodata.models.variant.avro.ClinVar>)value$; break;
    case 1: gwas = (java.util.List<org.opencb.biodata.models.variant.avro.Gwas>)value$; break;
    case 2: cosmic = (java.util.List<org.opencb.biodata.models.variant.avro.Cosmic>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clinvar' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> getClinvar() {
    return clinvar;
  }

  /**
   * Sets the value of the 'clinvar' field.
   * @param value the value to set.
   */
  public void setClinvar(java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> value) {
    this.clinvar = value;
  }

  /**
   * Gets the value of the 'gwas' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Gwas> getGwas() {
    return gwas;
  }

  /**
   * Sets the value of the 'gwas' field.
   * @param value the value to set.
   */
  public void setGwas(java.util.List<org.opencb.biodata.models.variant.avro.Gwas> value) {
    this.gwas = value;
  }

  /**
   * Gets the value of the 'cosmic' field.
   */
  public java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> getCosmic() {
    return cosmic;
  }

  /**
   * Sets the value of the 'cosmic' field.
   * @param value the value to set.
   */
  public void setCosmic(java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> value) {
    this.cosmic = value;
  }

  /** Creates a new VariantTraitAssociation RecordBuilder */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder() {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder();
  }
  
  /** Creates a new VariantTraitAssociation RecordBuilder by copying an existing Builder */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder other) {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder(other);
  }
  
  /** Creates a new VariantTraitAssociation RecordBuilder by copying an existing VariantTraitAssociation instance */
  public static org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder newBuilder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation other) {
    return new org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder(other);
  }
  
  /**
   * RecordBuilder for VariantTraitAssociation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<VariantTraitAssociation>
    implements org.apache.avro.data.RecordBuilder<VariantTraitAssociation> {

    private java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> clinvar;
    private java.util.List<org.opencb.biodata.models.variant.avro.Gwas> gwas;
    private java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> cosmic;

    /** Creates a new Builder */
    private Builder() {
      super(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clinvar)) {
        this.clinvar = data().deepCopy(fields()[0].schema(), other.clinvar);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gwas)) {
        this.gwas = data().deepCopy(fields()[1].schema(), other.gwas);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cosmic)) {
        this.cosmic = data().deepCopy(fields()[2].schema(), other.cosmic);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing VariantTraitAssociation instance */
    private Builder(org.opencb.biodata.models.variant.avro.VariantTraitAssociation other) {
            super(org.opencb.biodata.models.variant.avro.VariantTraitAssociation.SCHEMA$);
      if (isValidValue(fields()[0], other.clinvar)) {
        this.clinvar = data().deepCopy(fields()[0].schema(), other.clinvar);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gwas)) {
        this.gwas = data().deepCopy(fields()[1].schema(), other.gwas);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cosmic)) {
        this.cosmic = data().deepCopy(fields()[2].schema(), other.cosmic);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'clinvar' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> getClinvar() {
      return clinvar;
    }
    
    /** Sets the value of the 'clinvar' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setClinvar(java.util.List<org.opencb.biodata.models.variant.avro.ClinVar> value) {
      validate(fields()[0], value);
      this.clinvar = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'clinvar' field has been set */
    public boolean hasClinvar() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'clinvar' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearClinvar() {
      clinvar = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'gwas' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Gwas> getGwas() {
      return gwas;
    }
    
    /** Sets the value of the 'gwas' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setGwas(java.util.List<org.opencb.biodata.models.variant.avro.Gwas> value) {
      validate(fields()[1], value);
      this.gwas = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'gwas' field has been set */
    public boolean hasGwas() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'gwas' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearGwas() {
      gwas = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'cosmic' field */
    public java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> getCosmic() {
      return cosmic;
    }
    
    /** Sets the value of the 'cosmic' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder setCosmic(java.util.List<org.opencb.biodata.models.variant.avro.Cosmic> value) {
      validate(fields()[2], value);
      this.cosmic = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'cosmic' field has been set */
    public boolean hasCosmic() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'cosmic' field */
    public org.opencb.biodata.models.variant.avro.VariantTraitAssociation.Builder clearCosmic() {
      cosmic = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public VariantTraitAssociation build() {
      try {
        VariantTraitAssociation record = new VariantTraitAssociation();
        record.clinvar = fieldSetFlags()[0] ? this.clinvar : (java.util.List<org.opencb.biodata.models.variant.avro.ClinVar>) defaultValue(fields()[0]);
        record.gwas = fieldSetFlags()[1] ? this.gwas : (java.util.List<org.opencb.biodata.models.variant.avro.Gwas>) defaultValue(fields()[1]);
        record.cosmic = fieldSetFlags()[2] ? this.cosmic : (java.util.List<org.opencb.biodata.models.variant.avro.Cosmic>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
